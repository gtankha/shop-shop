{"ast":null,"code":"var _jsxFileName = \"/Users/gautamtankha/Documents/Berkeley Coding Course/All Projects/projects/shop-shop/client/src/components/ProductList/index.js\";\nimport React, { useEffect } from 'react';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n  const {\n    currentCategory\n  } = state;\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS); //const products = data?.products || [];\n\n  useEffect(() => {\n    // if there's data to be stored\n    if (data) {\n      // let's store it in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      }); // but let's also take each product and save it to IndexedDB using the helper function \n\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"my-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, \"Our Products:\"), state.products.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, filterProducts().map(product => /*#__PURE__*/React.createElement(ProductItem, {\n    key: product._id,\n    _id: product._id,\n    image: product.image,\n    name: product.name,\n    price: product.price,\n    quantity: product.quantity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \"You haven't added any products yet!\"), loading ? /*#__PURE__*/React.createElement(\"img\", {\n    src: spinner,\n    alt: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }) : null);\n}\n\nexport default ProductList;","map":{"version":3,"sources":["/Users/gautamtankha/Documents/Berkeley Coding Course/All Projects/projects/shop-shop/client/src/components/ProductList/index.js"],"names":["React","useEffect","useStoreContext","UPDATE_PRODUCTS","useQuery","ProductItem","QUERY_PRODUCTS","spinner","idbPromise","ProductList","state","dispatch","currentCategory","loading","data","type","products","forEach","product","filterProducts","filter","category","_id","length","map","image","name","price","quantity"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAEA,SAASC,WAAT,GAAuB;AAErB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,eAAe,EAAzC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAsBF,KAA5B;AACA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBV,QAAQ,CAACE,cAAD,CAAlC,CAJqB,CAMrB;;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIa,IAAJ,EAAU;AACR;AACAH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEZ,eADC;AAEPa,QAAAA,QAAQ,EAAEF,IAAI,CAACE;AAFR,OAAD,CAAR,CAFQ,CAOR;;AACAF,MAAAA,IAAI,CAACE,QAAL,CAAcC,OAAd,CAAuBC,OAAD,IAAa;AACjCV,QAAAA,UAAU,CAAC,UAAD,EAAa,KAAb,EAAoBU,OAApB,CAAV;AACD,OAFD;AAGD;AACF,GAdQ,EAcN,CAACJ,IAAD,EAAOD,OAAP,EAAgBF,QAAhB,CAdM,CAAT;;AAiBA,WAASQ,cAAT,GAA0B;AACxB,QAAI,CAACP,eAAL,EAAsB;AACpB,aAAOF,KAAK,CAACM,QAAb;AACD;;AAED,WAAON,KAAK,CAACM,QAAN,CAAeI,MAAf,CAAsBF,OAAO,IAAIA,OAAO,CAACG,QAAR,CAAiBC,GAAjB,KAAyBV,eAA1D,CAAP;AACD;;AAID,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEGF,KAAK,CAACM,QAAN,CAAeO,MAAf,gBACC;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKJ,cAAc,GAAGK,GAAjB,CAAqBN,OAAO,iBACzB,oBAAC,WAAD;AACE,IAAA,GAAG,EAAGA,OAAO,CAACI,GADhB;AAEE,IAAA,GAAG,EAAEJ,OAAO,CAACI,GAFf;AAGE,IAAA,KAAK,EAAEJ,OAAO,CAACO,KAHjB;AAIE,IAAA,IAAI,EAAEP,OAAO,CAACQ,IAJhB;AAKE,IAAA,KAAK,EAAER,OAAO,CAACS,KALjB;AAME,IAAA,QAAQ,EAAET,OAAO,CAACU,QANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CADL,CADD,gBAcC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAhBJ,EAkBIf,OAAO,gBACT;AAAK,IAAA,GAAG,EAAEN,OAAV;AAAmB,IAAA,GAAG,EAAC,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADS,GAC4B,IAnBvC,CADF;AAuBD;;AAED,eAAeE,WAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\"\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductList() {\n\n  const [state, dispatch] = useStoreContext();\n  const { currentCategory } = state;\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  //const products = data?.products || [];\n\n  useEffect(() => {\n    // if there's data to be stored\n    if (data) {\n      // let's store it in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      // but let's also take each product and save it to IndexedDB using the helper function \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  \n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n  \n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;\n"]},"metadata":{},"sourceType":"module"}