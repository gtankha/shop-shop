{"ast":null,"code":"var _jsxFileName = \"/Users/gautamtankha/Documents/Berkeley Coding Course/All Projects/projects/shop-shop/client/src/components/CategoryMenu/index.js\";\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { idbPromise } from '../../utils/helpers';\nconst {\n  loading,\n  data: categoryData\n} = useQuery(QUERY_CATEGORIES);\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n  const {\n    categories\n  } = state;\n  const {\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES);\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    }\n  }, [categoryData, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Choose a Category:\"), categories.map(item => /*#__PURE__*/React.createElement(\"button\", {\n    key: item._id,\n    onClick: () => {\n      handleClick(item._id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, item.name)));\n}\n\nexport default CategoryMenu;","map":{"version":3,"sources":["/Users/gautamtankha/Documents/Berkeley Coding Course/All Projects/projects/shop-shop/client/src/components/CategoryMenu/index.js"],"names":["React","useEffect","useQuery","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","QUERY_CATEGORIES","useStoreContext","idbPromise","loading","data","categoryData","CategoryMenu","state","dispatch","categories","type","forEach","category","handleClick","id","currentCategory","map","item","_id","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,iBAAT,EAA4BC,uBAA5B,QAA2D,qBAA3D;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,IAAI,EAAEC;AAAjB,IAAkCR,QAAQ,CAACG,gBAAD,CAAhD;;AAEA,SAASM,YAAT,GAAwB;AACtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,eAAe,EAAzC;AAEA,QAAM;AAAEQ,IAAAA;AAAF,MAAiBF,KAAvB;AAEA,QAAM;AAAEH,IAAAA,IAAI,EAAEC;AAAR,MAAyBR,QAAQ,CAACG,gBAAD,CAAvC;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIS,YAAJ,EAAkB;AAChBG,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEZ,iBADC;AAEPW,QAAAA,UAAU,EAAEJ,YAAY,CAACI;AAFlB,OAAD,CAAR;AAIAJ,MAAAA,YAAY,CAACI,UAAb,CAAwBE,OAAxB,CAAgCC,QAAQ,IAAI;AAC1CV,QAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,EAAsBU,QAAtB,CAAV;AACD,OAFD;AAGD;AACF,GAXQ,EAWN,CAACP,YAAD,EAAeG,QAAf,CAXM,CAAT;;AAaA,QAAMK,WAAW,GAAGC,EAAE,IAAI;AACxBN,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEX,uBADC;AAEPgB,MAAAA,eAAe,EAAED;AAFV,KAAD,CAAR;AAID,GALD;;AAOA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEGL,UAAU,CAACO,GAAX,CAAeC,IAAI,iBAClB;AACE,IAAA,GAAG,EAAEA,IAAI,CAACC,GADZ;AAEE,IAAA,OAAO,EAAE,MAAM;AACZL,MAAAA,WAAW,CAACI,IAAI,CAACC,GAAN,CAAX;AACF,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGD,IAAI,CAACE,IANR,CADD,CAFH,CADF;AAeD;;AAED,eAAeb,YAAf","sourcesContent":["import React, { useEffect} from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { idbPromise } from '../../utils/helpers';\nconst { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    }\n  }, [categoryData, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n             handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n"]},"metadata":{},"sourceType":"module"}